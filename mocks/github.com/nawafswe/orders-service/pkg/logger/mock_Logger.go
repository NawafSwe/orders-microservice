// Code generated by mockery v2.40.1. DO NOT EDIT.

package logger

import mock "github.com/stretchr/testify/mock"

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: data, args
func (_m *MockLogger) Debug(data map[string]interface{}, args interface{}) {
	_m.Called(data, args)
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - data map[string]interface{}
//   - args interface{}
func (_e *MockLogger_Expecter) Debug(data interface{}, args interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug", data, args)}
}

func (_c *MockLogger_Debug_Call) Run(run func(data map[string]interface{}, args interface{})) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(map[string]interface{}, interface{})) *MockLogger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: data, args
func (_m *MockLogger) Error(data map[string]interface{}, args interface{}) {
	_m.Called(data, args)
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - data map[string]interface{}
//   - args interface{}
func (_e *MockLogger_Expecter) Error(data interface{}, args interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error", data, args)}
}

func (_c *MockLogger_Error_Call) Run(run func(data map[string]interface{}, args interface{})) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(map[string]interface{}, interface{})) *MockLogger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: data, args
func (_m *MockLogger) Info(data map[string]interface{}, args interface{}) {
	_m.Called(data, args)
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - data map[string]interface{}
//   - args interface{}
func (_e *MockLogger_Expecter) Info(data interface{}, args interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info", data, args)}
}

func (_c *MockLogger_Info_Call) Run(run func(data map[string]interface{}, args interface{})) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(map[string]interface{}, interface{})) *MockLogger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: data, args
func (_m *MockLogger) Warn(data map[string]interface{}, args interface{}) {
	_m.Called(data, args)
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - data map[string]interface{}
//   - args interface{}
func (_e *MockLogger_Expecter) Warn(data interface{}, args interface{}) *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn", data, args)}
}

func (_c *MockLogger_Warn_Call) Run(run func(data map[string]interface{}, args interface{})) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return() *MockLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warn_Call) RunAndReturn(run func(map[string]interface{}, interface{})) *MockLogger_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
