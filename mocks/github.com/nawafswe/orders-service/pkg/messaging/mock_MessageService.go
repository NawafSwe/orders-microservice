// Code generated by mockery v2.40.1. DO NOT EDIT.

package messaging

import (
	context "context"

	internalpubsub "cloud.google.com/go/internal/pubsub"

	mock "github.com/stretchr/testify/mock"

	pubsub "cloud.google.com/go/pubsub"
)

// MockMessageService is an autogenerated mock type for the MessageService type
type MockMessageService struct {
	mock.Mock
}

type MockMessageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageService) EXPECT() *MockMessageService_Expecter {
	return &MockMessageService_Expecter{mock: &_m.Mock}
}

// CreateSubscription provides a mock function with given fields: ctx, id, topic
func (_m *MockMessageService) CreateSubscription(ctx context.Context, id string, topic *pubsub.Topic) error {
	ret := _m.Called(ctx, id, topic)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *pubsub.Topic) error); ok {
		r0 = rf(ctx, id, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageService_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type MockMessageService_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - topic *pubsub.Topic
func (_e *MockMessageService_Expecter) CreateSubscription(ctx interface{}, id interface{}, topic interface{}) *MockMessageService_CreateSubscription_Call {
	return &MockMessageService_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", ctx, id, topic)}
}

func (_c *MockMessageService_CreateSubscription_Call) Run(run func(ctx context.Context, id string, topic *pubsub.Topic)) *MockMessageService_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*pubsub.Topic))
	})
	return _c
}

func (_c *MockMessageService_CreateSubscription_Call) Return(_a0 error) *MockMessageService_CreateSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageService_CreateSubscription_Call) RunAndReturn(run func(context.Context, string, *pubsub.Topic) error) *MockMessageService_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTopic provides a mock function with given fields: ctx, topic
func (_m *MockMessageService) CreateTopic(ctx context.Context, topic string) (*pubsub.Topic, error) {
	ret := _m.Called(ctx, topic)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopic")
	}

	var r0 *pubsub.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pubsub.Topic, error)); ok {
		return rf(ctx, topic)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pubsub.Topic); ok {
		r0 = rf(ctx, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageService_CreateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTopic'
type MockMessageService_CreateTopic_Call struct {
	*mock.Call
}

// CreateTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
func (_e *MockMessageService_Expecter) CreateTopic(ctx interface{}, topic interface{}) *MockMessageService_CreateTopic_Call {
	return &MockMessageService_CreateTopic_Call{Call: _e.mock.On("CreateTopic", ctx, topic)}
}

func (_c *MockMessageService_CreateTopic_Call) Run(run func(ctx context.Context, topic string)) *MockMessageService_CreateTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMessageService_CreateTopic_Call) Return(_a0 *pubsub.Topic, _a1 error) *MockMessageService_CreateTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageService_CreateTopic_Call) RunAndReturn(run func(context.Context, string) (*pubsub.Topic, error)) *MockMessageService_CreateTopic_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscription provides a mock function with given fields: ctx, id
func (_m *MockMessageService) GetSubscription(ctx context.Context, id string) (*pubsub.Subscription, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 *pubsub.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pubsub.Subscription, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pubsub.Subscription); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageService_GetSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscription'
type MockMessageService_GetSubscription_Call struct {
	*mock.Call
}

// GetSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockMessageService_Expecter) GetSubscription(ctx interface{}, id interface{}) *MockMessageService_GetSubscription_Call {
	return &MockMessageService_GetSubscription_Call{Call: _e.mock.On("GetSubscription", ctx, id)}
}

func (_c *MockMessageService_GetSubscription_Call) Run(run func(ctx context.Context, id string)) *MockMessageService_GetSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMessageService_GetSubscription_Call) Return(_a0 *pubsub.Subscription, _a1 error) *MockMessageService_GetSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageService_GetSubscription_Call) RunAndReturn(run func(context.Context, string) (*pubsub.Subscription, error)) *MockMessageService_GetSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopic provides a mock function with given fields: ctx, topicId
func (_m *MockMessageService) GetTopic(ctx context.Context, topicId string) (*pubsub.Topic, error) {
	ret := _m.Called(ctx, topicId)

	if len(ret) == 0 {
		panic("no return value specified for GetTopic")
	}

	var r0 *pubsub.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pubsub.Topic, error)); ok {
		return rf(ctx, topicId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pubsub.Topic); ok {
		r0 = rf(ctx, topicId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, topicId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageService_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type MockMessageService_GetTopic_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - topicId string
func (_e *MockMessageService_Expecter) GetTopic(ctx interface{}, topicId interface{}) *MockMessageService_GetTopic_Call {
	return &MockMessageService_GetTopic_Call{Call: _e.mock.On("GetTopic", ctx, topicId)}
}

func (_c *MockMessageService_GetTopic_Call) Run(run func(ctx context.Context, topicId string)) *MockMessageService_GetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMessageService_GetTopic_Call) Return(_a0 *pubsub.Topic, _a1 error) *MockMessageService_GetTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageService_GetTopic_Call) RunAndReturn(run func(context.Context, string) (*pubsub.Topic, error)) *MockMessageService_GetTopic_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, topic, msg
func (_m *MockMessageService) Publish(ctx context.Context, topic string, msg *internalpubsub.Message) error {
	ret := _m.Called(ctx, topic, msg)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *internalpubsub.Message) error); ok {
		r0 = rf(ctx, topic, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageService_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockMessageService_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - msg *internalpubsub.Message
func (_e *MockMessageService_Expecter) Publish(ctx interface{}, topic interface{}, msg interface{}) *MockMessageService_Publish_Call {
	return &MockMessageService_Publish_Call{Call: _e.mock.On("Publish", ctx, topic, msg)}
}

func (_c *MockMessageService_Publish_Call) Run(run func(ctx context.Context, topic string, msg *internalpubsub.Message)) *MockMessageService_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*internalpubsub.Message))
	})
	return _c
}

func (_c *MockMessageService_Publish_Call) Return(_a0 error) *MockMessageService_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageService_Publish_Call) RunAndReturn(run func(context.Context, string, *internalpubsub.Message) error) *MockMessageService_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: ctx, subscription
func (_m *MockMessageService) Subscribe(ctx context.Context, subscription string) error {
	ret := _m.Called(ctx, subscription)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageService_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockMessageService_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - subscription string
func (_e *MockMessageService_Expecter) Subscribe(ctx interface{}, subscription interface{}) *MockMessageService_Subscribe_Call {
	return &MockMessageService_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, subscription)}
}

func (_c *MockMessageService_Subscribe_Call) Run(run func(ctx context.Context, subscription string)) *MockMessageService_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMessageService_Subscribe_Call) Return(_a0 error) *MockMessageService_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageService_Subscribe_Call) RunAndReturn(run func(context.Context, string) error) *MockMessageService_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageService creates a new instance of MockMessageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageService {
	mock := &MockMessageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
